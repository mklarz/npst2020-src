{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "Icon.svelte",
    "app.svelte",
    "box.svelte",
    "button.svelte",
    "download-button.svelte",
    "error.svelte",
    "export.svelte",
    "learning-runner.svelte",
    "learning.svelte",
    "popup.svelte",
    "registers.svelte",
    "source-code.svelte",
    "stdin.svelte",
    "stdout.svelte"
  ],
  "sourcesContent": [
    "<svg\r\n  aria-hidden=\"true\"\r\n  class=\"{classes}\"\r\n  role=\"img\"\r\n  xmlns=\"http://www.w3.org/2000/svg\"\r\n  viewBox=\"{viewBox}\"\r\n>\r\n  <path fill=\"currentColor\" d=\"{path}\" />\r\n</svg>\r\n<script>\r\n  export let icon;\r\n\r\n  let path = [];\r\n  let classes = \"\";\r\n  let viewBox = \"\";\r\n\r\n  $: viewBox = \"0 0 \" + icon.icon[0] + \" \" + icon.icon[1];\r\n\r\n  $: classes = \"fa-svelte \" + ($$props.class ? $$props.class : \"\");\r\n\r\n  $: path = icon.icon[4];\r\n</script>\r\n\r\n<style>\r\n  .fa-svelte {\r\n    width: 1em;\r\n    height: 1em;\r\n    overflow: visible;\r\n    display: inline-block;\r\n  }\r\n</style>",
    "<script lang=\"ts\">import { assemble, step } from \"@pstnorge/slede8\";\n;\n;\nimport { decompressFromEncodedURIComponent } from \"lz-string\";\nimport { onMount } from 'svelte';\nimport Box from \"./components/box.svelte\";\nimport Button from \"./components/button.svelte\";\nimport Error from './components/error.svelte';\nimport Export from \"./components/export.svelte\";\nimport Learning from \"./components/learning.svelte\";\nimport Registers from \"./components/registers.svelte\";\nimport SourceCode from \"./components/source-code.svelte\";\nimport Stdin from \"./components/stdin.svelte\";\nimport Stdout from \"./components/stdout.svelte\";\n;\nimport { workspace } from \"./store\";\nconst CPU_CYCLE_LIMIT = 1000;\nconst WALK_CPU_CYCLE_DURATION = 100;\nconst RUN_CPU_CYCLE_DURATION = 0;\nconst DEFAULT_RUNTIME = {\n    pc: 0,\n    regs: new Uint8Array(16),\n    memory: new Uint8Array(4096),\n    flag: false,\n    stdout: new Uint8Array(),\n    inputPtr: 0\n};\nlet activePopup = null;\nlet target = null;\nlet session = null;\nlet errorMessage = \"\";\nlet programIsRunning;\nlet executeNextInstructionWhenDone = false;\nlet lastCycle = 0;\nlet cycleDuration = WALK_CPU_CYCLE_DURATION;\nlet cpuCycleLimit = () => {\n    let temp = +(localStorage.getItem('üö≤') || \"\");\n    if (!isNaN(temp) && temp > 0) {\n        return ~~temp;\n    }\n    return CPU_CYCLE_LIMIT;\n};\n$: runtime = DEFAULT_RUNTIME;\n$: stdin = new Uint8Array;\n$: target;\n$: session;\n$: programIsRunning = session !== null;\nonMount(() => {\n    const fragment = window.location.hash.substring(1);\n    if (fragment.length > 0) {\n        try {\n            const shared = JSON.parse(decompressFromEncodedURIComponent(fragment));\n            workspace.set(shared);\n        }\n        catch (_a) {\n            console.info(\"Unable to restore workspace\");\n        }\n    }\n});\nfunction displayError(message) {\n    errorMessage = message;\n    activePopup = \"error\";\n}\nfunction spawn() {\n    runtime = Object.assign({}, DEFAULT_RUNTIME);\n    try {\n        target = assemble($workspace.sourceCode);\n        session = step(target.exe, stdin, cpuCycleLimit());\n    }\n    catch (e) {\n        displayError(`Montering feilet\\n\\n${e}`);\n        reset();\n    }\n}\nfunction runSingleStep() {\n    const now = new Date().getTime();\n    if (now - lastCycle < cycleDuration)\n        return requestAnimationFrame(runSingleStep);\n    lastCycle = now;\n    if (!session)\n        spawn();\n    try {\n        let tick = session === null || session === void 0 ? void 0 : session.next();\n        if (tick === null || tick === void 0 ? void 0 : tick.done)\n            return complete();\n        runtime = Object.assign(Object.assign({}, runtime), tick === null || tick === void 0 ? void 0 : tick.value);\n    }\n    catch (e) {\n        displayError(`Kj√∏ring feilet\\n\\n${e}`);\n        return stop();\n    }\n    if (executeNextInstructionWhenDone) {\n        requestAnimationFrame(runSingleStep);\n    }\n}\nfunction runToCompletion() {\n    cycleDuration = RUN_CPU_CYCLE_DURATION;\n    executeNextInstructionWhenDone = true;\n    requestAnimationFrame(runSingleStep);\n}\nfunction walkToCompletion() {\n    cycleDuration = WALK_CPU_CYCLE_DURATION;\n    executeNextInstructionWhenDone = true;\n    requestAnimationFrame(runSingleStep);\n}\nfunction stop() {\n    executeNextInstructionWhenDone = false;\n}\nfunction complete() {\n    stop();\n    session = null;\n}\nfunction reset() {\n    stop();\n    session = null;\n    target = null;\n    runtime = DEFAULT_RUNTIME;\n}\nfunction pause() {\n    executeNextInstructionWhenDone = false;\n}\n</script>\n\n{#if activePopup === \"eLearning\" }\n\t<Learning hide={() => { activePopup = null }} />\n{:else if activePopup === \"export\"}\n\t<Export hide={() => {activePopup = null} }/>\n{:else if activePopup === \"error\"}\n\t<Error hide={() => { activePopup = null}} message={errorMessage} />\n{/if}\n\n\n<main>\n\t<div id=\"stdin\">\n\t\t<Box label=\"F√∏de\">\n\t\t\t<Stdin bind:stdin={stdin} executing={programIsRunning} inputPtr={runtime.inputPtr} />\n\t\t</Box>\n\t</div>\n\t\n\t<div id=\"source\">\n\t\t<Box label=\"Kode\">\n\t\t\t<SourceCode currentLine={target?.pdb[runtime.pc] || null} executing={programIsRunning} />\n\t\t</Box>\n\t</div>\n\t\n\t<div id=\"controls\">\n\t\t<Box label=\"Kontroller\">\n\t\t\t<nav>\n\t\t\t\t<Button disabled={executeNextInstructionWhenDone} fullWidth fullHeight on:click={runSingleStep}>Skritt</Button>\n\t\t\t\t{#if executeNextInstructionWhenDone}\n\t\t\t\t\t<Button disabled={!executeNextInstructionWhenDone} fullWidth fullHeight on:click={pause}>Pause</Button>\n\t\t\t\t{:else}\n\t\t\t\t\t<div style=\"display: flex\">\n\t\t\t\t\t\t<Button disabled={executeNextInstructionWhenDone} fullWidth fullHeight on:click={walkToCompletion}>G√•</Button>\n\t\t\t\t\t\t<Button disabled={executeNextInstructionWhenDone} fullWidth fullHeight on:click={runToCompletion}>L√∏p</Button>\n\t\t\t\t\t</div>\n\t\t\t\t{/if}\n\t\t\t\t<Button disabled={!programIsRunning} fullWidth fullHeight on:click={reset}>Stans</Button>\n\t\t\t\t<Button disabled={programIsRunning} fullWidth fullHeight on:click={() => activePopup = \"eLearning\"}>E-l√¶ring</Button>\n\t\t\t\t<Button disabled={programIsRunning} fullWidth fullHeight on:click={() => activePopup = \"export\"}>Del</Button>\n\n\t\t\t</nav>\n\t\t</Box>\n\t</div>\n\t\n\t<div id=\"state\">\n\t\t<Box label=\"Tilstand\">\n\t\t\t<Registers runtime={runtime} />\n\t\t</Box>\n\t</div>\n\n\t<div id=\"stdout\">\n\t\t<Box label=\"Oppgulp\">\n\t\t\t<Stdout runtime={runtime} />\n\t\t</Box>\n\t</div>\n</main>\n\n\n<style>\n\tmain :global(textarea) {\n\t\tpadding: 0.2em 0.5em;\n\t\twidth: 100%;\n        resize: none;\n        overflow: auto;\n\n\t\tcolor: var(--primaryColor);\n\t\tbackground-color: var(--backgroundColor);\n        border: none;\n\t\toutline: none;\n\t}\n\n\tmain {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\tright: 0;\n\t\tbottom: 0;\n\n\t\tdisplay: grid;\n\t\tgrid-template-areas: \n\t\t\t\"stdin stdin stdin\"\n\t\t\t\"source controls state\"\n\t\t\t\"source stdout stdout\";\n\t\tgrid-template-rows: auto 1fr 1fr;\n\t\tgrid-template-columns: 2fr 1fr auto;\n\t}\n\n\tmain > div {\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\tpadding: 1em 0.5em;\n\t}\n\n\t#stdin {\n\t\tgrid-area: stdin;\n\t}\n\t#stdout {\n\t\tgrid-area: stdout;\n\t}\n\t#source {\n\t\tgrid-area: source;\n\t}\n\t#state {\n\t\tgrid-area: state;\n\t}\n\t#controls {\n\t\tgrid-area: controls;\n\t}\n\n\tnav {\n\t\tdisplay: grid;\n\t\tgrid-template-columns: 1fr;\n\t\tgrid-gap: 1em;\n\t\tpadding: 1em;\n\t\theight: 100%;\n\t}\n\n</style>\n",
    "<script type=\"ts\">export let label = null;\nexport let error = false;\n</script>\n\n<section class:error={error}>\n    {#if label}<h1 class:error={error}>{label}</h1>{/if}\n    <div>\n        <slot></slot>\n    </div>\n</section>\n\n<style>\n    section {\n        position: relative;\n        border: 2px solid gray;\n        width: 100%;\n        height: 100%;\n    }\n\n    section.error {\n        border-color: var(--errorColor);\n    }\n\n    h1 {\n        position: absolute;\n        z-index: 1;\n        display: inline-block;\n        top: -1.5em;\n        left: 0.5em;\n        background-color: var(--primaryColor);\n        padding: 0.2em 0.5em;\n        font-size: 16px;\n        font-weight: bold;\n        color: black;\n\n        -webkit-touch-callout: none;\n        -webkit-user-select: none;\n        -khtml-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        user-select: none;\n    }\n\n    h1.error {\n        background-color: var(--errorColor);\n    }\n\n    div {\n        width: 100%;\n        height: 100%;\n        padding: 1em 0.5em 0.5em 0.5em;\n    }\n</style>",
    "<script type=\"ts\">export let disabled = false;\nexport let fullWidth = false;\nexport let fullHeight = false;\nexport let gray = false;\nexport let error = false;\n</script>\n\n<button disabled={disabled} class:error class:gray on:click class:fullWidth class:fullHeight><slot /></button>\n\n<style>\n\n    button {\n        cursor: pointer;\n        text-align: center;\n        color: var(--primaryColor);\n        border: 1px solid var(--primaryColor);\n        background: var(--backgroundColor);\n        font-weight: bold;\n        padding: 0.2em 0.5em;\n        outline: none;\n        \n        -webkit-touch-callout: none;\n        -webkit-user-select: none;\n        -khtml-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        user-select: none;\n    }\n\n    button.fullWidth {\n        width: 100%;\n    }\n\n    button.fullHeight {\n        height: 100%;\n    }\n\n    button.gray, button:disabled {\n        color: var(--borderColor);\n        border-color: var(--borderColor);\n    }\n\n    button.error {\n        color: var(--errorColor);\n        border-color: var(--errorColor);\n    }\n\n\tbutton:active {\n\t\tcolor: var(--primaryColorAccent);\n\t\tborder-color: var(--primaryColorAccent);\n    }\n\n    button.error:active {\n        color: var(--errorColorAccent);\n        border-color: var(--errorColorAccent);\n    }\n\n    button:disabled {\n        cursor: default;\n    }\n</style>",
    "\n<script type=\"ts\">export let href;\nexport let download;\nexport let disabled = false;\nexport let fullWidth = false;\n</script>\n\n<a href={href} {disabled} download={download} class:fullWidth><slot /></a>\n\n<style>\n    a {\n        display: inline-block;\n        text-decoration: none;\n        text-align: center;\n        color: var(--primaryColor);\n        border: 1px solid var(--primaryColor);\n        background: var(--backgroundColor);\n        font-weight: bold;\n        padding: 0.2em 0.5em;\n        outline: none;\n            \n        -webkit-touch-callout: none;\n        -webkit-user-select: none;\n        -khtml-user-select: none;\n        -moz-user-select: none;\n        -ms-user-select: none;\n        user-select: none;\n    }\n\n\ta:active {\n\t\tcolor: var(--primaryColorAccent);\n\t\tborder: 1px solid var(--primaryColorAccent);\n\t}\n\n    a.fullWidth {\n        width: 100%;\n    }\n</style>",
    "<script type=\"ts\">import Box from \"./box.svelte\";\nimport Button from \"./button.svelte\";\nimport Popup from \"./popup.svelte\";\nexport let hide;\nexport let message;\n</script>\n\n\n<Popup hide={hide}>\n    <Box error>\n        <section>\n            <h1>Noe gikk galt</h1>\n            <pre>{message}</pre>\n            <p>\n                <Button error fullWidth on:click={hide}>Lukk</Button>\n            </p>\n        </section>\n    </Box>\n</Popup>\n\n<style>\n    section {\n        color: var(--errorColor);\n        padding: 1em;\n    }\n    h1 {\n        margin: 0;\n        padding: 0;\n    }\n    pre {\n        color: var(--errorColor);\n    }\n</style>",
    "<script type=\"ts\">import { onDestroy } from \"svelte\";\nimport Box from \"./box.svelte\";\nimport Button from './button.svelte';\nimport Popup from './popup.svelte';\nimport DownloadButton from \"./download-button.svelte\";\nimport Icon from \"fa-svelte\";\n;\nimport { compressToEncodedURIComponent } from \"lz-string\";\nimport { workspace } from '../store';\nimport { assemble } from \"@pstnorge/slede8\";\nimport { faDownload, faHammer } from '@fortawesome/free-solid-svg-icons';\nexport let hide;\nlet shareableURL;\nconst getURL = (workspace) => {\n    const workspaceState = compressToEncodedURIComponent(JSON.stringify(workspace));\n    return `${window.location.origin}#${workspaceState}`;\n};\n$: shareableURL = getURL($workspace);\nlet downloadURL;\nlet compileError = null;\nfunction compile() {\n    try {\n        compileError = null;\n        const target = assemble($workspace.sourceCode);\n        URL.revokeObjectURL(downloadURL);\n        const blob = new Blob([target.exe.buffer], { type: \"application/octet-stream\" });\n        downloadURL = URL.createObjectURL(blob);\n    }\n    catch (e) {\n        compileError = `Feil under montering: \\n${e}`;\n    }\n}\nonDestroy(() => {\n    URL.revokeObjectURL(downloadURL);\n});\n</script>\n\n\n<Popup hide={hide}>\n    <Box>\n        <section>\n            <h1>Del</h1>\n\n            <p>Benytt lenken nedenfor til √• dele mesterverket ditt.</p>\n            <input id=\"share-workspace-url\" type=\"text\" readonly bind:value={shareableURL} />\n            <p><strong>OBS</strong>: M√• ikke deles med SPST.</p>\n            <h2>Eksporter bin√¶rfil</h2>\n\n            \n            {#if downloadURL}\n                <DownloadButton fullWidth href={downloadURL} download=\"program.s8\"><Icon icon={faDownload} /> Last ned</DownloadButton>\n            {:else if compileError}\n                <p class=\"error\">{compileError}</p>\n            {:else}\n                <Button fullWidth on:click={compile}><Icon icon={faHammer} /> Monter</Button>\n            {/if}\n\n            <p>\n                <Button fullWidth on:click={hide}>Lukk</Button>\n            </p>\n        </section>\n    </Box>\n</Popup>\n\n<style>\n    section {\n        padding: 1em;\n    }\n    h1 {\n        margin: 0 0 0.2em 0;\n        padding: 0;\n    }\n    input {\n        width: 100%;\n        display: block;\n        background: var(--backgroundColor);\n        color: var(--primaryColor);\n        border: none;\n        outline: none;\n        border: 1px solid var(--primaryColor);\n        padding: 0.2em 0.5em;\n    }\n\n    p.error {\n        color: var(--errorColor);\n    }\n</style>",
    "<script type=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport Button from './button.svelte';\nimport { eLearning, workspace } from \"../store\";\nimport { step, assemble } from \"@pstnorge/slede8\";\nimport { hex } from '../utils';\n;\nfunction tryAssemble() {\n    try {\n        const { exe } = assemble($workspace.sourceCode);\n        return exe;\n    }\n    catch (e) {\n        throw `Feil under montering: \\n${e}`;\n    }\n}\nfunction abort() {\n    eLearning.set(null);\n}\nlet clientSideTests = null;\nlet serverSideTests = null;\nfunction runClientSideTests() {\n    return __awaiter(this, void 0, void 0, function* () {\n        serverSideTests = null;\n        clientSideTests = new Promise((resolve) => {\n            const exe = tryAssemble();\n            let stdin = new Uint8Array(($eLearning === null || $eLearning === void 0 ? void 0 : $eLearning.exampleInput) || []);\n            let session = step(exe, stdin, 10000);\n            while (true) {\n                const tick = session.next();\n                if (tick.done) {\n                    const expected = [...($eLearning === null || $eLearning === void 0 ? void 0 : $eLearning.exampleOutput) || []].map(x => hex(x)).toString();\n                    const actual = ([...tick.value.stdout].map(x => hex(x)).toString());\n                    const input = [...stdin].map(x => hex(x).slice(-2)).join(\"\");\n                    if (expected !== actual) {\n                        return resolve({\n                            message: `Feil resultat med input '${input}'\\nForventet '${expected}'\\nFikk '${actual}'`,\n                            success: false,\n                        });\n                    }\n                    serverSideTests = runServerSideTests(exe);\n                    return resolve({ message: \"Koden besto eksempeltesten\", success: true });\n                }\n            }\n        });\n    });\n}\nfunction runServerSideTests(exe) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return fetch(\"/.netlify/functions/run\", {\n            method: \"POST\",\n            headers: {\n                \"Accept\": \"application/json\",\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({ id: $eLearning === null || $eLearning === void 0 ? void 0 : $eLearning.id, blob: [...exe] })\n        }).then((res) => __awaiter(this, void 0, void 0, function* () { return yield res.json(); }));\n    });\n}\n</script>\n<p>\n    Lever besvarelse\n</p>\n<p>\n    <Button fullWidth on:click={runClientSideTests}>Send inn</Button>\n</p>\n<p>\n    <Button error fullWidth on:click={abort}>Avbryt modul</Button>\n</p>\n\n{#await clientSideTests}\n    <p>‚è≥ Kj√∏rer lokale tester</p>\n{:then localResult}\n    {#if localResult?.success === true}\n        <p>‚úî Lokale tester best√•tt</p>\n        {#await serverSideTests}\n            <p>‚è≥ Kj√∏rer tester p√• server</p>\n        {:then serverResult}\n            {#if serverResult?.success === true}\n                <p>‚úî Tester p√• server best√•tt</p>\n                <textarea>{serverResult?.message}</textarea>\n            {:else if serverResult?.success === false}\n                <p>‚ùå Tester p√• server feilet</p>\n                <textarea readonly class=\"error\">{serverResult?.message}</textarea>\n            {/if}\n        {:catch}\n            <p>‚ùå Tester p√• server kr√¶sjet</p>\n        {/await}\n    {:else if localResult?.success === false}\n        <p>‚ùå Lokale tester feilet</p>\n        <textarea readonly class=\"error\">{localResult?.message}</textarea>\n    {/if}\n{:catch localError}\n    <p>‚ùå Lokale tester kr√¶sjet</p>\n    <textarea readonly class=\"error\">{localError}</textarea>\n{/await}\n\n\n\n<style>\n\n    textarea {\n        color: var(--primaryColor);\n        background: var(--backgroundColor);\n        border-color: var(--primaryColor);\n        width: 100%;\n        resize: none;\n        height: 5em;\n    }\n\n    textarea.error {\n        color: var(--errorColor);\n        border-color: var(--errorColor);\n    }\n</style>",
    "<script type=\"ts\">var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport Box from \"./box.svelte\";\nimport Button from './button.svelte';\nimport LearningRunner from \"./learning-runner.svelte\";\nimport Popup from './popup.svelte';\nimport { eLearning, workspace } from \"../store\";\nimport { hex } from \"../utils\";\nexport let hide;\nlet loadPromise = null;\nlet writeModuleId = \"\";\nlet selectModuleId = ($eLearning === null || $eLearning === void 0 ? void 0 : $eLearning.id) || \"Hei, verden!\";\nlet defaultModules = [\n    { label: \"Hei, verden!\", id: \"Hei, verden!\" },\n    { label: \"Enkel addisjon\", id: \"Enkel addisjon\" },\n    { label: \"Skriv inn kode manuelt\", id: null },\n];\n$: moduleId = selectModuleId || writeModuleId;\nfunction load() {\n    loadPromise = fetch(`/.netlify/functions/load?id=${encodeURIComponent(moduleId)}`)\n        .then((res) => __awaiter(this, void 0, void 0, function* () {\n        const data = yield res.json();\n        if (\"error\" in data)\n            throw data.error;\n        const { id, exampleInput, exampleOutput, sourceCode } = data;\n        workspace.set({ sourceCode, input: exampleInput.map(x => hex(x).slice(-2)).join(\"\") });\n        eLearning.set({ id, exampleInput, exampleOutput, sourceCode });\n    }));\n}\n</script>\n\n\n<Popup hide={hide}>\n    <Box>\n        <section>\n            <h1>E-l√¶ring</h1>\n            \n            <!-- svelte-ignore empty-block -->\n            {#await loadPromise}\n            {:catch e}\n                <p class=\"error\">Klarte ikke √• hente modul: {e}</p>\n            {/await}\n\n            \n\n            {#if $eLearning}\n                <div class=\"module\">\n                    <Box label={$eLearning?.id}>\n                        <LearningRunner />\n                    </Box>\n                </div>\n\n            {:else}\n                <Box label=\"Velg modul\">\n                    <section>\n                        <form on:submit|preventDefault={load}>\n                            <div class=\"form-control\">\n                                <label for=\"select\">Modul:</label>\n                                <select id=\"select\" bind:value={selectModuleId}>\n                                    {#each defaultModules as m}\n                                        <option value={m.id}>{m.label}</option>\n                                    {/each}\n                                </select>\n                            </div>\n                            <div class=\"form-control\">\n                                {#if selectModuleId === null}\n                                    <label for=\"write\">Kode:&nbsp;</label>\n                                    <input id=\"write\" type=\"text\" bind:value={writeModuleId} />\n                                {/if}\n                            </div>\n                            {#await loadPromise}\n                                <Button fullWidth disabled on:click={load}>Hent</Button>\n                            {:then}\n                                <Button fullWidth on:click={load}>Hent</Button>\n                            {:catch}\n                                <Button fullWidth on:click={load}>Pr√∏v igjen</Button>\n                            {/await}\n                        </form>           \n                    </section>\n                </Box>\n            {/if}\n            <p>\n                <Button fullWidth on:click={hide}>Lukk</Button>\n            </p>\n        </section>\n    </Box>\n</Popup>\n\n<style>\n    section {\n        padding: 1em;\n    }\n    h1 {\n        margin: 0 0 1em 0;\n        padding: 0;\n    }\n\n    .module {\n        margin-top: 2em;\n    }\n\n    p.error {\n        color: var(--errorColor);\n    }\n\n    div.form-control {\n        display: flex;\n        flex-direction: row;\n        align-items: center;\n        margin-bottom: 0.5em;\n    }\n\n    label {\n        display: block;\n        padding-right: 1em;\n    }\n\n    input {\n        flex: 1;\n        display: block;\n        background: var(--backgroundColor);\n        color: var(--primaryColor);\n        border: none;\n        outline: none;\n        border: 1px solid var(--primaryColor);\n        padding: 0.2em 0.5em;\n    }\n\n    select {\n        background: var(--backgroundColor);\n        color: var(--primaryColor);\n        border-color: var(--primaryColor);\n        padding: 0.2em 0.5em;\n    }\n</style>",
    "<script type=\"ts\">export let hide;\n</script>\n\n<div class=\"blur\" on:click={hide}>\n    <div class=\"content\" on:click|stopPropagation={() => {}}>\n        <slot />\n    </div>\n</div>\n\n<style>\n    .blur {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tleft: 0;\n\t\tright: 0;\n\t\tbottom: 0;\n\t\tz-index: 2;\n\t\tbackground-color: rgba(255, 255, 255, 0.2);\n\t\tbackdrop-filter: blur(1px);\n\t}\n\n\tdiv.content {\n\t\tposition: absolute;\n\t\tleft: 50%;\n\t\ttop: 40%;\n\t\tmin-width: 60ch;\n\t\ttransform: translate(-50%, -40%);\n\t\tbackground: var(--backgroundColor);\n    }\n</style>",
    "<script type=\"ts\">;\nimport { hex } from \"../utils\";\nimport DynamicValue from \"./dynamic-value.svelte\";\nexport let runtime;\n$: instruction = (runtime.memory[runtime.pc + 1] << 8) | runtime.memory[runtime.pc];\n</script>\n\n\n<table>\n    <tbody>\n        <tr>\n            <th>flag</th>\n            <td colspan=\"3\">\n                <DynamicValue flashOnUpdate format=\"flag\" value={runtime.flag ? 1 : 0} />\n            </td>\n        </tr>\n        <tr>\n            <th>pc</th>\n            <td colspan=\"3\">\n                <DynamicValue flashOnUpdate format=\"address\" value={runtime.pc} />\n            </td>\n        </tr>\n        <tr>\n            <th>*pc</th>\n            <td colspan=\"3\">\n                <DynamicValue flashOnUpdate format=\"instruction\" value={instruction} />\n            </td>\n        </tr>\n        <tr>\n            <td class=\"separator\" colspan=\"4\"></td>\n        </tr>\n        {#each [...Array(8).keys()] as index (index)}\n        <tr>\n            <th>r{index}</th>\n            <td>\n                <DynamicValue flashOnUpdate format=\"byte\" value={runtime.regs[index]} />\n            </td>\n            <th>r{8+index}</th>\n            <td>\n                <DynamicValue flashOnUpdate format=\"byte\" value={runtime.regs[8+index]} />\n            </td>\n        </tr>\n        {/each}\n    </tbody>\n</table>\n\n<style>\n    th {\n        text-align: right;\n        background: var(--primaryColor);\n        color: var(--backgroundColor);\n        border: 1px solid var(--primaryColor);\n        padding: 0.2em 0.5em;\n        text-align: center;\n        width: 6ch;\n    }\n    td {\n        border: 1px solid var(--primaryColor);\n        padding: 0 0.5em;\n        text-align: right;\n    }\n    td.separator {\n        border: 0;\n        height: 1em;\n    }\n</style>",
    "<script type=\"ts\">;\nimport { workspace } from \"../store\";\nexport let currentLine;\nexport let executing;\n</script>\n\n{#if executing}\n    <div class=\"wrapper\">\n    {#each $workspace.sourceCode.split(\"\\n\") as line, lineNumber}\n        <div class=\"line\" class:current={lineNumber === currentLine?.lineNumber }>\n            <span class=\"code\">{line}&nbsp;</span>\n            {#if currentLine?.lineNumber === lineNumber && currentLine?.address !== null}\n                <span class=\"symbol\">{`@ 0x${currentLine.address.toString(16).padStart(2, '0')}`}</span>\n            {/if}\n        </div>\n    {/each}\n    </div>\n{:else} \n    <textarea spellcheck={false} bind:value={$workspace.sourceCode} />\n{/if}\n\n\n<style>\n\n    textarea {\n        height: 100%;\n        white-space: pre;\n    }\n\n    div.wrapper {\n        padding: 0.4em;\n        margin: 0 0 0.5em 0;\n        overflow: auto;\n        border-radius: 2px;\n        height: 100%;\n        width: 100%;\n        color: rgba(255, 255, 255, 0.4);\n    }\n\n    div.line {\n        display: block;\n        position: relative;\n        width: 100%;\n        height: auto;\n    }\n\n    span.code {\n        font-size: 16px;\n        white-space: pre;\n\n    }\n    \n    span.symbol {\n        display: block;\n        text-align: right;\n        position: absolute;\n        right: 0;\n        top: 0;\n    }\n    div.line.current {\n        background: rgba(255, 255, 255, 0.4);\n        color: lightgreen;\n    }\n</style>\n",
    "<script type=\"ts\">import { hex } from \"../utils\";\nimport { workspace } from \"../store\";\nexport let inputPtr;\nexport let executing;\nexport let stdin;\nfunction toBuffer(raw) {\n    try {\n        let values = (raw.match(/.{1,2}/g) || []).map((byte) => parseInt(byte, 16));\n        return new Uint8Array(values);\n    }\n    catch (e) {\n        return new Uint8Array([]);\n    }\n}\n$: stdin = toBuffer($workspace.input);\n</script>\n\n{#if executing}\n    <div>\n        {#each [...stdin].map((value) => hex(value).slice(-2)) as byte, index}\n            <span class:current={index === inputPtr}>{byte}</span>\n        {/each}\n    </div>\n{:else}\n    <input type=\"text\" pattern=\"^[0-9abcdefABCDEF]+$\" bind:value={$workspace.input} />\n{/if}\n\n<style>\n\n    div {\n        min-height: calc(1.15em + 2px);\n        overflow: auto;\n        white-space: nowrap;\n        padding: 1px 2px;\n    }\n\n    span {\n        display: inline-block;\n        height: 100%;\n        color: var(--borderColor);\n    }\n    span.current {\n        color: var(--colorPrimary);        \n    }\n\n    input {\n        background-color: black;\n        color: var(--colorPrimary);\n        border: none;\n        outline: none;\n        width: 100%;\n        height: 100%;\n        padding: 1px 2px;\n    }\n\n    input:invalid {\n        color: var(--errorColor);\n    }\n</style>",
    "<script type=\"ts\">import { hex } from \"../utils\";\n;\nimport Button from \"./button.svelte\";\nexport let runtime;\n$: buff = (runtime === null || runtime === void 0 ? void 0 : runtime.stdout) || new Uint8Array();\n$: utf8 = new TextDecoder(\"utf-8\").decode(buff);\nlet ascii = false;\n$: content = ascii ? utf8 : [...buff].map(x => hex(x).slice(-2)).join(\"\");\n</script>\n\n<div>\n    <Button gray={!ascii} on:click={() => ascii = true}>Aa</Button>\n    <Button gray={ascii} on:click={() => ascii = false}>0x</Button>\n</div>\n<textarea readonly>{content}</textarea> \n\n<style>\n    div {\n        position: absolute;\n        top: 0;\n        right: 0;\n        display: flex;\n    }\n    textarea {\n        height: 100%;\n        white-space: pre;\n    }\n</style>"
  ],
  "names": [],
  "mappings": "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"
}